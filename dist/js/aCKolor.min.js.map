{"version":3,"sources":["ckolorpicker-factory.js","ckolorpicker-input-directive.js","ckolorpicker-wheel-directive.js"],"names":["aCKolor","factory","self","alpha","ckoloring","defaultColor","display","inputHsl","h","s","l","hex","hsl","hues","model","modelId","originalFormat","previousColors","rgb","r","g","b","circleWidth","init","data","previous","angular","fromJson","localStorage","aCKolorPreviousColors","current","convertTo","hslToRgb","rgbToHex","save","indexOf","unshift","length","toJson","toggleCKoloring","previousColorClick","color","updateHSL","updateColorDisplay","updateRGB","rgbToHsl","updateHEX","result","exec","hexToRgb","hueLightFromRadial","e","wheel","rect","getBoundingClientRect","radius","width","left","top","cx","cy","dx","pageX","dy","pageY","angle","Math","atan2","PI","degrees","absoluteX","abs","absoluteY","lightness","round","sqrt","radialXY","outerRadius","x","cos","y","sin","str","split","substring","parseInt","max","min","d","isNaN","m","c","isFinite","intToHex","i","toString","module","directive","$document","CKolorFactory","$compile","$timeout","restrict","scope","elementId","inputId","name","type","blur","template","link","elm","attrs","clearBlurs","undefined","$body","removeClass","setCircleWidth","offsetWidth","console","log","makeid","text","possible","charAt","floor","random","body","element","querySelector","existing","content","append","addClass","$watch","newVal","oldVal","valid","colors","test","$window","saturation","srect","arect","wheelMove","updateHueLightFromRadial","saturationMove","saturationValue","alphaMove","alphaValue","mouseUpped","removeEventListener","wheelDown","addEventListener","saturationDown","alphaDown","$watchCollection","hls"],"mappings":"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","file":"aCKolor.min.js","sourcesContent":["(function(aCKolor) {\n\taCKolor.factory('CKolorFactory', function(){\n\t\tvar self = {\n\t\t\talpha: 100,\n\t\t\tckoloring: false,   // Flag that determines if the color wheel is open or not\n\t\t\tdefaultColor: '#FFFFFF', // If model is null, default to this\n\t\t\tdisplay: 'hex',     // Color mode that is displayed, auto selected by model's color mode and changed by the dropdown selection\n\t\t\tinputHsl: {         // HSL number input values - hue, saturation, lightness\n\t\t\t\th: null,\n\t\t\t\ts: null,\n\t\t\t\tl: null\n\t\t\t},\n\t\t\thex: null,          // Hex input value\n\t\t\thsl: {              // HSL values. The factory converts the model to HSL then sets the other types. Used on the color wheel and saturation slider.\n\t\t\t\th: null,\n\t\t\t\ts: null,\n\t\t\t\tl: null\n\t\t\t},\n\t\t\thues: [ 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 245, 255, 265, 275, 285, 295, 305, 315, 325, 335, 345, 355, 5, 15, 25, 35, 45, 55, 65 ], // 36 values of hue degrees used on the color wheel background\n\t\t\tmodel: null,        // The given color value\n\t\t\tmodelId: null,      // The id of the given model. When there are multiple colorpickers, this is used by the directives to determine which model is currently being worked on so they aren't all updated\n\t\t\toriginalFormat: null, // The original format of the model. HSL, Hex, or RGB\n\t\t\tpreviousColors: [], // Previous chosen colors. Global and stored to localStorage\n\t\t\trgb: {              // RGB input value. Red, Green, Blue\n\t\t\t\tr: null,\n\t\t\t\tg: null,\n\t\t\t\tb: null\n\t\t\t},\n\t\t\tcircleWidth: 0,     // The width of the color wheel\n\n\t\t\t/* Called from the input directive to initialize the color wheel with it's values */\n\t\t\tinit: function(data){\n\t\t\t\tself.alpha = 100;\n\n\t\t\t\t/* Given model info */\n\t\t\t\tself.defaultColor = data.defaultColor ? data.defaultColor : '#FFFFFF';\n\t\t\t\tself.model = data.model;\n\t\t\t\tself.modelId = data.modelId;\n\t\t\t\tvar previous = angular.fromJson(localStorage.aCKolorPreviousColors);\n\t\t\t\tif(previous){\n\t\t\t\t\tself.previousColors = previous;\n\t\t\t\t}\n\n\t\t\t\t/* Convert the color data */\n\t\t\t\tvar current = self.convertTo(); /* To HSL */\n\t\t\t\tif(current){\n\t\t\t\t\tself.hsl.h = self.inputHsl.h = current.h;\n\t\t\t\t\tself.hsl.s = self.inputHsl.s = current.s;\n\t\t\t\t\tself.hsl.l = self.inputHsl.l = current.l;\n\t\t\t\t\tself.rgb = self.hslToRgb(current);\n\t\t\t\t\tself.hex = self.rgbToHex(self.rgb);\n\n\t\t\t\t\t/* Set the display to be original format, ie hex->hex */\n\t\t\t\t\tself.display = self.originalFormat;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/* Updates the model and toggles the ckoloring flag off */\n\t\t\tsave: function(){\n\t\t\t\t/* convert back to original format */\n\t\t\t\tif(self.alpha === 100){\n\t\t\t\t\tswitch(self.originalFormat){\n\t\t\t\t\t\tcase 'hex': self.model = self.hex; break;\n\t\t\t\t\t\tcase 'hsl': self.model = 'hsl(' + self.hsl.h + ',' + self.hsl.s + '%,' + self.hsl.l + '%)'; break;\n\t\t\t\t\t\tcase 'rgb': self.model = 'rgb(' + self.rgb.r + ',' + self.rgb.g + ',' + self.rgb.b + ')'; break;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tif(self.originalFormat === 'hsl'){\n\t\t\t\t\t\tself.model = 'hsla(' + self.hsl.h + ',' + self.hsl.s + '%,' + self.hsl.l + '%' + ',' + (self.alpha / 100) + ')';\n\t\t\t\t\t}else{\n\t\t\t\t\t\tself.model = 'rgba(' + self.rgb.r + ',' + self.rgb.g + ',' + self.rgb.b + ',' + (self.alpha / 100) + ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(self.previousColors.indexOf(self.model) === -1){\n\t\t\t\t\tself.previousColors.unshift(self.model);\n\t\t\t\t\tif(self.previousColors.length > 20){\n\t\t\t\t\t\tself.previousColors.length = 20;\n\t\t\t\t\t}\n\t\t\t\t\tlocalStorage.aCKolorPreviousColors = angular.toJson(self.previousColors);\n\t\t\t\t}\n\t\t\t\tself.toggleCKoloring();\n\t\t\t},\n\n\t\t\tpreviousColorClick: function(color){\n\t\t\t\tvar originalFormat = self.originalFormat;\n\t\t\t\tvar current = self.convertTo(color); /* To HSL */\n\t\t\t\tif(current){\n\t\t\t\t\tself.hsl.h = self.inputHsl.h = current.h;\n\t\t\t\t\tself.hsl.s = self.inputHsl.s = current.s;\n\t\t\t\t\tself.hsl.l = self.inputHsl.l = current.l;\n\t\t\t\t\tself.rgb = self.hslToRgb(current);\n\t\t\t\t\tself.hex = self.rgbToHex(self.rgb);\n\n\t\t\t\t\t/* Set the display to be original format, ie hex->hex */\n\t\t\t\t\tself.display = self.originalFormat;\n\t\t\t\t}\n\t\t\t\tself.updateHSL();\n\t\t\t},\n\n\t\t\t/* Toggles ckoloring off */\n\t\t\ttoggleCKoloring: function(){\n\t\t\t\tself.ckoloring = false;\n\t\t\t},\n\n\t\t\t/* Updates the display to the given parameter */\n\t\t\tupdateColorDisplay: function(display){\n\t\t\t\tself.display = display;\n\t\t\t\treturn self.display;\n\t\t\t},\n\n\t\t\t/* Convert other color models when this is called */\n\t\t\tupdateHSL: function(){\n\t\t\t\tself.hex = self.rgbToHex(self.hslToRgb(self.hsl));\n\t\t\t\tself.rgb = self.hslToRgb(self.hsl);\n\t\t\t\tself.inputHsl = self.hsl;\n\t\t\t},\n\n\t\t\t/* Convert other color models when this is called */\n\t\t\tupdateRGB: function(){\n\t\t\t\tself.hex = self.rgbToHex(self.rgb);\n\t\t\t\tself.hsl = self.rgbToHsl(self.rgb);\n\t\t\t},\n\n\t\t\t/* Convert other color models when this is called */\n\t\t\tupdateHEX: function(){\n\t\t\t\t/* Make sure it's a valid hex string */\n\t\t\t\tvar result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(self.hex);\n\t\t\t\tif(self.hex && self.hex.length == 7 && result){\n\t\t\t\t\tself.rgb = self.hexToRgb(self.hex);\n\t\t\t\t\tself.hsl = self.rgbToHsl(self.rgb);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/* Conversion Utilities */\n\n\t\t\t/* Get HSL from a point on color wheel */\n\t\t\thueLightFromRadial: function(e, wheel){\n\t\t\t\t/* Get color wheel dimensions */\n\t\t\t\tvar rect = wheel.getBoundingClientRect();\n\t\t\t\tvar radius = rect.width / 2;\n\t\t\t\tvar left = rect.left;\n\t\t\t\tvar top = rect.top;\n\n\t\t\t\t/* Color wheel center points */\n\t\t\t\tvar cx = radius + left;\n\t\t\t\tvar cy = radius + top;\n\n\t\t\t\t/* Mouse position distance from color wheel center */\n\t\t\t\tvar dx = e.pageX - cx;\n\t\t\t\tvar dy = e.pageY - cy;\n\n\t\t\t\t/* Hue degrees */\n\t\t\t\tvar angle = Math.atan2(dy, dx) * (180 / Math.PI);\n\t\t\t\tvar degrees = angle;\n\t\t\t\tif(degrees < 0){\n\t\t\t\t\tdegrees = degrees + 360;\n\t\t\t\t}\n\n\n\n\n\t\t\t\t/* Lightness */\n\t\t\t\tvar absoluteX = Math.abs(dx);\n\t\t\t\tvar absoluteY = Math.abs(dy);\n\t\t\t\tvar lightness = Math.round(100 - ((Math.sqrt((absoluteX * absoluteX) + (absoluteY * absoluteY)) * 100) / radius));\n\n\t\t\t\t/* Set Hue and Lightnes, update other values and scoop positions */\n\t\t\t\tself.hsl.l = lightness > -1 ? lightness < 101 ? lightness : 100 : 0;\n\t\t\t\tself.hsl.h = (Math.round(degrees) > -1 || Math.round(degrees) < 360)? Math.round(degrees) : 0 ;\n\t\t\t\tself.updateHSL();\n\t\t\t\tself.radialXY();\n\n\t\t\t\treturn {\n\t\t\t\t\th: self.hsl.h,\n\t\t\t\t\tl: self.hsl.l\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t/* Set scoop position based on HSL values */\n\t\t\tradialXY: function(){\n\t\t\t\tvar outerRadius = self.circleWidth / 2;\n\t\t\t\tvar radius = outerRadius * ((100 - self.hsl.l) / 100);\n\t\t\t\tvar degrees = self.hsl.h;\n\t\t\t\tvar x = outerRadius + (radius * Math.cos(degrees * Math.PI / 180));\n\t\t\t\tvar y = (outerRadius * 2) - (outerRadius + -(radius * Math.sin(degrees * Math.PI / 180)));\n\n\t\t\t\treturn {\n\t\t\t\t\tx: x,\n\t\t\t\t\ty: y\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t/* Convert color string to HSL */\n\t\t\tconvertTo: function(str){\n\t\t\t\t/* If not supplied, use the given model */\n\t\t\t\tstr = (!str) ? self.model ? self.model : 'null' : str;\n\n\t\t\t\tvar rgb;\n\n\t\t\t\t/* If hex */\n\t\t\t\tif(str.indexOf('#') > -1){\n\t\t\t\t\trgb = self.hexToRgb(str);\n\t\t\t\t\tself.originalFormat = 'hex';\n\t\t\t\t\treturn self.rgbToHsl(rgb);\n\n\t\t\t\t}\n\n\t\t\t\t/* If HSL */\n\t\t\t\telse if(str.indexOf('hsla') > -1){\n\t\t\t\t\tstr = str.split('(')[1];\n\t\t\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\t\t\tstr = str.split(',');\n\t\t\t\t\tself.originalFormat = 'hsl';\n\t\t\t\t\tself.alpha = str[3] * 100;\n\t\t\t\t\treturn {\n\t\t\t\t\t\th: parseInt(str[0]),\n\t\t\t\t\t\ts: parseInt(str[1]),\n\t\t\t\t\t\tl: parseInt(str[2])\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\telse if(str.indexOf('hsl') > -1){\n\t\t\t\t\tstr = str.split('(')[1];\n\t\t\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\t\t\tstr = str.split(',');\n\t\t\t\t\tself.originalFormat = 'hsl';\n\t\t\t\t\treturn {\n\t\t\t\t\t\th: parseInt(str[0]),\n\t\t\t\t\t\ts: parseInt(str[1]),\n\t\t\t\t\t\tl: parseInt(str[2])\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\t/* If RGB */\n\t\t\t\telse if(str.indexOf('rgba') > -1){\n\t\t\t\t\tstr = str.split('(')[1];\n\t\t\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\t\t\tstr = str.split(',');\n\t\t\t\t\tself.originalFormat = 'rgb';\n\t\t\t\t\tself.alpha = str[3] * 100;\n\t\t\t\t\treturn self.rgbToHsl({\n\t\t\t\t\t\tr: parseInt(str[0]),\n\t\t\t\t\t\tg: parseInt(str[1]),\n\t\t\t\t\t\tb: parseInt(str[2])\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\telse if(str.indexOf('rgb') > -1){\n\t\t\t\t\tstr = str.split('(')[1];\n\t\t\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\t\t\tstr = str.split(',');\n\t\t\t\t\tself.originalFormat = 'rgb';\n\t\t\t\t\treturn self.rgbToHsl({\n\t\t\t\t\t\tr: parseInt(str[0]),\n\t\t\t\t\t\tg: parseInt(str[1]),\n\t\t\t\t\t\tb: parseInt(str[2])\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\telse if(str.indexOf('transparent') > -1){\n\t\t\t\t\tself.originalFormat = 'rgb';\n\t\t\t\t\tself.alpha = 0;\n\t\t\t\t\trgb = self.hexToRgb(self.defaultColor);\n\t\t\t\t\treturn self.rgbToHsl(rgb);\n\t\t\t\t}\n\n\t\t\t\telse{\n\t\t\t\t\tself.originalFormat = 'rgb';\n\t\t\t\t\trgb = self.hexToRgb(self.defaultColor);\n\t\t\t\t\treturn self.rgbToHsl(rgb);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/* Sourced from http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */\n\t\t\thexToRgb: function(hex) {\n\t\t\t\tvar result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\t\t\t\treturn result ? {\n\t\t\t\t\tr: parseInt(result[1], 16),\n\t\t\t\t\tg: parseInt(result[2], 16),\n\t\t\t\t\tb: parseInt(result[3], 16)\n\t\t\t\t} : null;\n\t\t\t},\n\n\t\t\t/* Sourced from http://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion */\n\t\t\trgbToHsl: function(rgb){\n\t\t\t\tvar r = rgb.r / 255;\n\t\t\t\tvar g = rgb.g / 255;\n\t\t\t\tvar b = rgb.b / 255;\n\t\t\t\tvar max = Math.max(r, g, b), min = Math.min(r, g, b);\n\t\t\t\tvar h, s, l = (max + min) / 2;\n\n\t\t\t\tif(max == min){\n\t\t\t\t\th = s = 0; // achromatic\n\t\t\t\t}else{\n\t\t\t\t\tvar d = max - min;\n\t\t\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\t\t\t\tswitch(max){\n\t\t\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t\t\t\t\t\tcase g: h = (b - r) / d + 2; break;\n\t\t\t\t\t\tcase b: h = (r - g) / d + 4; break;\n\t\t\t\t\t}\n\t\t\t\t\th /= 6;\n\t\t\t\t}\n\n\t\t\t\tif(h === 0 || isNaN(h)){\n\t\t\t\t\th = self.hsl.h;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\th: (Math.round((h * 360) * 100)) / 100,\n\t\t\t\t\ts: (Math.round((s * 100) * 100)) / 100,\n\t\t\t\t\tl: (Math.round((l * 100) * 100)) / 100\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t/* Source from http://hsl2rgb.nichabi.com/javascript-function.php */\n\t\t\thslToRgb: function(hsl){\n\t\t\t\tvar h = hsl.h;\n\t\t\t\tvar s = hsl.s;\n\t\t\t\tvar l = hsl.l;\n\t\t\t\tvar r, g, b, m, c, x;\n\n\t\t\t\tif (!isFinite(h)) h = 0;\n\t\t\t\tif (!isFinite(s)) s = 0;\n\t\t\t\tif (!isFinite(l)) l = 0;\n\n\t\t\t\th /= 60;\n\t\t\t\tif (h < 0) h = 6 - (-h % 6);\n\t\t\t\th %= 6;\n\n\t\t\t\ts = Math.max(0, Math.min(1, s / 100));\n\t\t\t\tl = Math.max(0, Math.min(1, l / 100));\n\n\t\t\t\tc = (1 - Math.abs((2 * l) - 1)) * s;\n\t\t\t\tx = c * (1 - Math.abs((h % 2) - 1));\n\n\t\t\t\tif (h < 1) {\n\t\t\t\t\tr = c;\n\t\t\t\t\tg = x;\n\t\t\t\t\tb = 0;\n\t\t\t\t} else if (h < 2) {\n\t\t\t\t\tr = x;\n\t\t\t\t\tg = c;\n\t\t\t\t\tb = 0;\n\t\t\t\t} else if (h < 3) {\n\t\t\t\t\tr = 0;\n\t\t\t\t\tg = c;\n\t\t\t\t\tb = x;\n\t\t\t\t} else if (h < 4) {\n\t\t\t\t\tr = 0;\n\t\t\t\t\tg = x;\n\t\t\t\t\tb = c;\n\t\t\t\t} else if (h < 5) {\n\t\t\t\t\tr = x;\n\t\t\t\t\tg = 0;\n\t\t\t\t\tb = c;\n\t\t\t\t} else {\n\t\t\t\t\tr = c;\n\t\t\t\t\tg = 0;\n\t\t\t\t\tb = x;\n\t\t\t\t}\n\n\t\t\t\tm = l - c / 2;\n\t\t\t\tr = Math.round((r + m) * 255);\n\t\t\t\tg = Math.round((g + m) * 255);\n\t\t\t\tb = Math.round((b + m) * 255);\n\n\t\t\t\treturn { r: r, g: g, b: b };\n\t\t\t},\n\n\t\t\tintToHex: function(i) {\n\t\t\t\tvar hex = parseInt(i).toString(16);\n\t\t\t\treturn (hex.length < 2) ? \"0\" + hex : hex;\n\t\t\t},\n\n\t\t\trgbToHex: function(rgb){\n\t\t\t\treturn '#' + self.intToHex(rgb.r) + self.intToHex(rgb.g) + self.intToHex(rgb.b);\n\t\t\t}\n\n\t\t};\n\t\treturn self;\n\t})\n\t;\n})(angular.module('aCKolor',[]));\n","(function(aCKolor) {\n    /* MARKUP\n     * <a-ckolor element-id=\"'an_id'\" input-id=\"'inputs'\" model=\"app.color\" name=\"'color-input'\" type=\"'hidden'\"></a-ckolor>\n     */\n\n    aCKolor.directive('aCkolor', function($document, CKolorFactory, $compile, $timeout){\n        return {\n            restrict: 'E',\n            scope: {\n                elementId: '=',     // OPTIONAL: The id of container element\n                inputId: '=',       // OPTIONAL: the id of the input\n                model:'=',          // The model to watch\n                name: '=',          // OPTIONAL: input name\n                type: '=',          // Type of input\n                defaultColor: '=',  // OPTIONAL: If the model is an invalid color string, use this instead\n\t\t\t\tblur: '='   \t\t// OPTIONAL: Enable or disable the css blur filter behind the overlay. Enabled by default\n            },\n            templateUrl: '../html/ackolor.html',\n            link: function(scope,elm,attrs){\n\n\t\t\t\tconsole.log(scope);\n\n                var makeid = function(){\n                    var text = \"\";\n                    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n                    for(var i=0;i<35;i++){text+=possible.charAt(Math.floor(Math.random()*possible.length));}\n                    return text;\n                };\n\n                /* DOM Definitions */\n                var body = $document[0].body;\n\t\t\t\tvar $body = angular.element(body);\n\t\t\t\tvar wheel = body.querySelector('.c-ckolor__wheel');\n                /* End DOM Definitions */\n\n\n                function clearBlurs(){\n\t\t\t\t\tif(scope.blur === true || scope.blur === undefined){\n\t\t\t\t\t\t$body.removeClass('c-ckolor__overlay-blur');\n\t\t\t\t\t}\n                }\n\n\t\t\t\tfunction setCircleWidth(){\n\t\t\t\t\tif(wheel && wheel.offsetWidth){\n\t\t\t\t\t\tCKolorFactory.circleWidth = wheel.offsetWidth;\n\t\t\t\t\t}else{\n\t\t\t\t\t\t$timeout(function(){\n\t\t\t\t\t\t\tsetCircleWidth();\n\t\t\t\t\t\t}, 200);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n                /* Make a random id */\n                var modelId = makeid();\n                scope.CKolorFactory = CKolorFactory;\n\n                if(!scope.type){\n                    scope.type = 'hidden';\n                }\n\n                /* Toggles the color wheel */\n                scope.toggleCKoloring = function(){\n\t\t\t\t\tvar existing = body.querySelector('a-ckolor-wheel');\n\t\t\t\t\tif(!existing){\n\t\t\t\t\t\tvar template = '<a-ckolor-wheel></a-ckolor-wheel>';\n\t\t\t\t\t\tvar content = $compile(template)(scope);\n\t\t\t\t\t\t$body.append(content);\n\t\t\t\t\t\twheel = body.querySelector('.c-ckolor__wheel');\n\t\t\t\t\t}\n\n\t\t\t\t\tif(scope.blur === true || scope.blur === undefined){\n\t\t\t\t\t\t$body.addClass('c-ckolor__overlay-blur');\n\t\t\t\t\t}\n\n                    /* Init color wheel */\n                    CKolorFactory.init({\n                        model: scope.model,\n                        modelId: modelId,\n                        defaultColor: scope.defaultColor\n                    });\n\n                    /* Open color wheel */\n                    CKolorFactory.ckoloring = true;\n\t\t\t\t\tsetCircleWidth();\n                };\n\n                /* When CKolorFactory.save() is called and the model is updated */\n                scope.$watch(function(){return CKolorFactory.model;}, function(newVal, oldVal){\n\n                    /* If model update and is this directive's model */\n                    if(newVal !== oldVal && CKolorFactory.modelId === modelId && newVal !== scope.model){\n                        /* Clear blurring classes */\n                        clearBlurs();\n\n\t\t\t\t\t\tvar valid, colors, i;\n\n                        /* Validate the colors, update only if valid */\n                        switch(CKolorFactory.originalFormat){\n                            case 'hex':\n                                valid = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(CKolorFactory.model);\n                                if(valid){ scope.model = CKolorFactory.model; }\n                                break;\n                            case 'rgb':\n                                try{\n                                    colors = CKolorFactory.model.split('(')[1].split(')')[0].split(',');\n                                    valid = true;\n                                    for (i=0;i<colors.length;i++) {\n                                        colors[i] = parseInt(colors[i]);\n                                        if (isNaN(colors[i]) || colors[i] > 255 || colors[i] < 0) {\n                                            valid = false;\n                                        }\n                                    }\n                                    if(valid){ scope.model = CKolorFactory.model; }\n                                }catch(e){}\n                                break;\n                            case 'hsl':\n                                try{\n                                    colors = CKolorFactory.model.split('(')[1].split(')')[0].split(',');\n                                    valid = true;\n                                    for (i=0;i<colors.length;i++) {\n                                        colors[i] = parseInt(colors[i]);\n                                        if(i === 0){\n                                            if (isNaN(colors[i]) || colors[i] > 360 || colors[i] < 0) {\n                                                valid = false;\n                                            }\n                                        }else{\n                                            if (isNaN(colors[i]) || colors[i] > 100 || colors[i] < 0) {\n                                                valid = false;\n                                            }\n                                        }\n                                    }\n                                    if(valid){ scope.model = CKolorFactory.model; }\n                                }catch(e){}\n                                break;\n                        }\n\n                    }\n                });\n\n                /* On color wheel closing, clear the blurring classes */\n                scope.$watch(function(){return CKolorFactory.ckoloring;}, function(newVal, oldVal){\n                    if(CKolorFactory.ckoloring === false && CKolorFactory.modelId === modelId){\n                        clearBlurs();\n                    }\n                });\n            }\n        };\n    });\n})(angular.module('aCKolor'));\n","(function(aCKolor) {\n    /* MARKUP\n     * <a-ckolor-wheel></a-ckolor-wheel>\n     */\n    aCKolor.directive('aCkolorWheel', function($timeout, $document, CKolorFactory, $window){\n        return {\n            restrict: 'E',\n            templateUrl: '../html/ackolor-wheel.html',\n            link: function(scope,elm,attrs){\n                scope.CKolorFactory = CKolorFactory;\n\n                /* DOM Definitions */\n                var body = $document[0].body;\n                var wheel = elm[0].querySelector('.c-ckolor__wheel-value');\n                var scoop = elm[0].querySelector('.c-ckolor__wheel-scoop');\n                var closeBtn = elm[0].querySelector('.c-ckolor__close-btn');\n                var saveBtn = elm[0].querySelector('.c-ckolor__save-btn');\n                var saturation = elm[0].querySelector('.c-ckolor__saturation');\n                var saturationHandle = elm[0].querySelector('.c-ckolor__saturation-handle');\n                var alpha = elm[0].querySelector('.c-ckolor__alpha');\n                var alphaHandle = elm[0].querySelector('.c-ckolor__alpha-handle');\n\t\t\t\tvar overlayInner = elm[0].querySelector('.c-ckolor__overlay-inner');\n                var rect = null;\n                var srect = null;\n                var arect = null;\n                /* End DOM Definitions */\n\n\n                /* DOM Manipulations */\n                /* Mouse movement on color wheel, update hue and lightness */\n\n                var wheelMove = function(e){\n\t\t\t\t\tif(!wheel){\n\t\t\t\t\t\twheel = elm[0].querySelector('.c-ckolor__wheel-value');\n\t\t\t\t\t}\n\n\t\t\t\t\tif(wheel){\n\t\t\t\t\t\t$timeout(function(){CKolorFactory.hueLightFromRadial(e, wheel);});\n\t\t\t\t\t}\n                };\n\n\t\t\t\tscope.updateHueLightFromRadial = function(e){\n\t\t\t\t\twheelMove(e);\n\t\t\t\t};\n\n                /* Mouse movement on saturation slider, update saturation */\n                var saturationMove = function(e){\n                    var x = e.pageX - (srect.left);\n\t\t\t\t\tvar saturationValue = Math.round((x / srect.width) * 100);\n\n\t\t\t\t\tif(saturationValue < 0){\n\t\t\t\t\t\tsaturationValue = 0;\n\t\t\t\t\t}else if(saturationValue > 100){\n\t\t\t\t\t\tsaturationValue = 100;\n\t\t\t\t\t}\n                    CKolorFactory.hsl.s = saturationValue;\n                    $timeout(function(){\n                        CKolorFactory.updateHSL();\n                    });\n                };\n\n                /* Mouse movement on saturation slider, update alpha */\n                var alphaMove = function(e){\n                    var x = e.pageX - (arect.left);\n\t\t\t\t\tvar alphaValue = Math.round((x / arect.width) * 100);\n\n\t\t\t\t\tif(alphaValue < 0){\n\t\t\t\t\t\talphaValue = 0;\n\t\t\t\t\t}else if(alphaValue > 100){\n\t\t\t\t\t\talphaValue = 100;\n\t\t\t\t\t}\n\n                    CKolorFactory.alpha = alphaValue;\n\n                    $timeout(function(){\n                        CKolorFactory.updateHSL();\n                    });\n                };\n\n                /* On body-> mouseup, clear out mousemove event listeners */\n                var mouseUpped = function(e){\n                    body.removeEventListener('mousemove', wheelMove, true);\n                    body.removeEventListener('mousemove', saturationMove, true);\n\t\t\t\t\tbody.removeEventListener('mousemove', alphaMove, true);\n                };\n\n                /* On mouse down, add mouse move and up listeners to detect dragging start/end */\n                var wheelDown = function(e){\n                    /* Color wheel dimensions */\n                    rect = wheel.getBoundingClientRect();\n                    /* Called to update colors if only a click */\n                    wheelMove(e);\n                    /* Add mouse move event listeners */\n                    body.addEventListener('mousemove', wheelMove, true);\n                };\n\n                /* On mouse down, add mouse move and up listeners to detect dragging start/end */\n                var saturationDown = function(e){\n                    /* Saturation slider dimensions */\n                    srect = saturation.getBoundingClientRect();\n                    /* Called to update colors if only a click */\n                    saturationMove(e);\n                    /* Add mouse move event listeners */\n                    body.addEventListener('mousemove', saturationMove, true);\n                };\n\n                /* On mouse down, add mouse move and up listeners to detect dragging start/end */\n                var alphaDown = function(e){\n                    /* Alpha slider dimensions */\n                    arect = alpha.getBoundingClientRect();\n                    /* Called to update colors if only a click */\n                    alphaMove(e);\n                    /* Add mouse move event listeners */\n\t\t\t\t\t//alpha\n                    body.addEventListener('mousemove', alphaMove, true);\n                };\n\n                wheel.addEventListener('mousedown', wheelDown, true);\n                saturation.addEventListener('mousedown', saturationDown, true);\n                alpha.addEventListener('mousedown', alphaDown, true);\n\n\t\t\t\tbody.addEventListener('mouseup', mouseUpped, true);\n                /* End DOM Manipulations */\n\n                /* If HSL is updated and valid, trigeer the other color formats to be updated */\n                scope.$watchCollection(function(){return CKolorFactory.hls;}, function(newVal, oldVal){\n                    if(\n                        newVal !== oldVal &&\n                        !isNaN(newVal.h) && !isNaN(newVal.l) && !isNaN(newVal.s) &&\n                        newVal.h >= 0 && newVal.h <= 360 &&\n                        newVal.l >= 0 && newVal.l <= 255 &&\n                        newVal.s >= 0 && newVal.s <= 255\n                    ){\n                        CKolorFactory.updateHSL();\n                    }\n                });\n            }\n        };\n    });\n})(angular.module('aCKolor'));\n"],"sourceRoot":"/source/"}